30 talls - bilproduksjon - japan - kravstore kjøpere - færre kjøpere, mere skreddsydde biler
	* Toyota production system - små batcher ( oppdage feil tidligere, høyere kvalitet på materialer, færre folk på team, som blir mere ansvarliggjort )
	* på 70 og 80 talls utkonkurrerte japanerne europeere og amerikanerne på kvalitet og lønn
	* "The toyota way" bok
	* istedet av å pusje batchene til neste steg, neste steg bestiller batch'en fra forrige steg
		- de som fra forrige steg er ledige, kan hjelpe på neste steg

Software:
	* Kravspec -> design -> utvikling -> testing -> akseptanse -> produksjon [waterfall]
	
	[scrum]	
		* Kravspec blir delte i user stories ( beskriver behovene men ikke nød. løsningene )
			- "as a user i want to..., because"
		
		* Kravspec blir til en backlog, så liten så mulig blir sett i gang, for å få en MVP
		* Den delen av backlog'en som settes i gang er en sprint
		* i hver sprint blir en user story lagt til en task
		* i en sprint, det er ikke lov å forstyrre med andre oppgaver eller justeringer. De går i backlog'en
		* product owner / scrum master
		* review / demo / retrospective
		* dette går på tid ( sprint ) og funker best på en stor produkt
	
	[kanban]
		* design -> utvikling -> prod
		* grense på maks # på hver fase (små batsjer)
		* dette går ikke på tid og funker best da du ikke har kontroll på produktet

Feilhåndtering: 
	A - hovedfunksjonaliteten ikke funker
	B - det finnes workaround
	C - nice to have

Problem og løsning:
	* begge kan være kjente eller ukjente
		* Eksempel, hus: problemer er kjent ( du kan beskrive og kjenner dem ). Løsningene kjennes godt også. Waterfall funker her.
		  Vitenskapelig utvikling også ligger her
		* Software: problemer er kjent men ikke løsningene. Her funker agile / scrum / kanban, fordi vi har kunnskap.
		* Hvis vi ikke har kunnskap eller kjenner ikke helt hvilke problemet skal vi treffe, der er lean som gjelder. Hypotese tilnærming til hva vi skal gjøre. Teste hele tiden med brukere. 
		* Ukjent problem men kjent løsning: der bruker man SAP :D

	* Hypotesdrevet utvikling: Build - Measure - Learn
		* hypoteser blir til en funksjonalitet som skal testet og resultatene måles, også lærer vi, og til neste syklus blir det noe nytt i bakloggen.
			- målingsmetodikk skal bestemmes før man begynner å lage fuksjonaliteten.
			- utfordringen er også å begrense seg til MVP
								
