SERVICE = intangible elements around a product, such as: 
	
	* SLA
	* UX
	* support
	* performance
	* taking the risks of delivery
	* taking the costs of delivery
	* deliver an OUTCOME that is VALUE

VALUE = a result of the combination of:

	* UTILITY it does what the customer is looking for ( functional requirements ) - fit for purpose 
	* WARRANTY it is fit for purpose: continuity of delivery, SLA / availability, security, capacity ( non functional requirements ) - fit for use
	
It is NOT only a financial term


BUSINESS CASE = a justification for a process of delivery
	* requirements
	* costs
	* objective

ITIL LIFECYCLE
	1 service strategy
	2 service design
	3 service design package
	4 service transition ( development, training )
	5 service operation
	6 back to 1

AGILE
	* smaller, frequent releases
	* smaller development time
	* easier to identify errors early, when fixing is cheap
	* QUALITY IS BUILT IN from he beginning
	* automation minimize human error in processes with high levels of routine
	* high level of involvment of operations to minimize downtime

Demin Cycle ( Toyota Kata )
	1 Plan
	2 Do
	3 Check performance
	4 Improve

LEAN ( also Toyota Kata )
	* Focusing on reducing waste
	* Types of waste: TIMWOODS
		

DASA: Devops Agile Skills Association

COMPETENCE SKILLS
	* courage
	* teambuilding
	* leadership
	* continuous improvement

KNOWLEDGE SKILLS
	* architecture / design 
	* business value optimization
	* business analysis
	* infrastructure engineering
	* security risk and compliance
	* testing
	* programming
	* continuous delivery

CHALLENGES: 
	* incidents ( loss of customer satisfaction and trust )
	* manual processes cause errors
	* backlog ( lack of staff )
	* infrequent releases, or releases implementing features that are not required by the business
	* organizational silos
	* different mindsets, tools, environments ( test, staging, prod )
	* blame game
	* no feedback loops
	* lack of interest in learning each others' tools

Tension between Change and Stability ( wall of confusion )
	* well defined responsibilities are needed 

ANTIFRAGILITY
	* getting better as a consequence of shock, disruption and disorder
	* it means thriving on stressors
	* going beyond resilience and robustness
	* startups are antifragile, large organizations are fragile
	* short devops loops USE disruption to improve a service

REASONS TO DO DEVOPS
	1 * improved speed to market ( faster delivery , agile )
	2 * continuous integration and delivery ( faster, agile ): automated testing, automated build, auomtated release
	3 * higher quality built in, fewer failures, more stability
	4 * innovative process
	5 * employees are empowered, more responsible and more happy
	6 * more collaboration in the company, remove compartimentation remove waste of time, waiting, and augment communication and awareness
	7 * reduced costs

DEVOPS IS A CULTURAL AND OPERATIONAL MODEL THAT FOSTERS COLLABORATION TO ENABLE HIGH-PERFORMANCE IT TO ACHIEVE BUSINESS GOALS

DEVOPS CORE PRINCIPLES	

	1 * customer centric action ( short feedback loop ) 
		- no bureaucracy
		- no fear of asking questions 
		- take risks ( uncertainty in the future ), but calculated ones
		- innovate freely / experiment / fail fast

	2 * create with end in mind ( understand the real needs of customers )
		- know where you are, where you want to go, how to get here, involve key stakeholders
		- not a process oriented model, but oversee the complete picture
		- focus on product value
		- MVP
		- small batches deliveries to get feedback about value

	3 * end to end responsibility ( the whole team is accountable )
		- if you builid it, you run it: you create a work pattern and you are more likely to "be it"

	4 * cross functional and autonomous teams, taking own decisions
		- T shaped profiles with breadth of knowledge and depth of expertise
		- Complementary skills
		- give positive feedback 
		- high trust
		- no heroes in devops

	5 * continuous improvement
		- if it hurts, do it more often
		- fail fast
		- experiment
		- measure everything, if it's not measurable, cannot be improved ( perf, process, innovation, culture, support )
		- LEARN

	6 * automate as much as possible
		- manual action fails
		- high routine = high risk
		- plan, do, check, act
		- continuous improvement is helped by automation
		- continuous delivery use automation to get into production fast and often
		- cloud replace datacenter
		- container based infrastructure ( infrastructure as code ) 

STRUCTURED PROBLEM SOLVING

	1: DMAIC
		* DEFINE a symptom and describe the problem, ensure stakeholders agree on scope of problem
		* MEASURE collecting data, validate the data
		* ANALYZE and structure data, find cause of the problem
		* IMPROVE solution alternatives, choose one
		* CONTROL anchor a change, learn a lesson

	2: KAIZEN
		* See problem 
		* Solve problem
		* Share lesson: WHY?



DEVOPS SKILLS 
	
	COMPETENCE ( not-exactly technical skills / acquired skills )
		* Courage
		* Team Building
		* Continuous Improvement
		* Leadership

	KNOWLEDGE ( more like technical skills ) 
		* Infra engineering
		* Biz value optimization
			- Feedback
			- SLA
			- Management of activities
			- Business cases
		* Biz analysis
			- Functional and non functional requirements
			- Long term
			- Data analysis
		* Programming
		* Continuous Delivery
		* Test
		* Security, Risk, Compliance
		* Architecture and Design

KEY ROLES

	* Scrum master
	* Business rep / Product manager
	* Tech Arkit
	* Dev
	* Tester / QA
	* Op
	* UX

LEADERSHIP
	* Mission command vs. Central command
		1) Mission command addresses the unpredictability, based on probabilistic assumptions. 
		   it fosters decentralization, self-discipline, cooperation, high tempo and uses implicit and interactive communication.
		   It is characterized by spontaneity, informality. 
		   The leadership works by delegation, and it aims at transformation.
		   Can be both horizontal and vertical and is interactive. 

		2) Central command addresses the predictability, based on deterministic assumptions. 
		   it fosters obedience, centralization, compliance, and the ability is focused at the top. The communication style is 
		   formal and explicit, and it aims at coercion.
		   The leadership works by directing and it aims at transaction. 
		   It is mainly vertical and linear. 
			 
	Mission command relates very much to the DevOps world: both because the wold of devops is unpredictable and requires felxibility
	and adaptiveness ( requires acceptance of unpredictability)       
	
	LEADERSHIP STYLE
	
	See, Ask why, Show respect
	
	See what is happening on the work floor, investigate why activities are carried out the way they are, and always deal with people
	in a respectful way. The key in this process is giving and receive feedback  

	The Feedback model
	
	To receive feedback
		1) Listen without interruption
		2) Avoid discussions or excuses
		3) Check if there is clear understanding
		4) Recognize other person's position, Thank her, Determine whether the feedback is applied

	To give feedback 
		1) Describe concrete observations
		2) Explain what it does to you
		3) Wait and listen to clarifying questions
		4) Give concrete suggestions OR recognition / incentive
	
		

	* Leave the team to decide how to fix the problem
	* analyze and measure to identify what direction and what deviation
	* ask to cross the river, not to build a bridge


CULTURE
	* No standard recipe to build a Devops culture
	* 4 improvements to set in place: teambuilding, courage, contonuous improvement, leadership
	
Implementing a culture cannot really be a program, because following the a program is also about the time in which you are not following it.
So what is necessary to do with culture is the same that is done with services and products: experiment, measuring, probing and deciding the next steps to take.
It is not a straight line. 

Facilitating activities in relation to cultural elements: 

Continuous improvement: retrospectives, knowledge sessions, hackatons, empowerment
Experimentation: time for sandbox, applaud ideas, safe to fail
Build quality in: test automation, end to end responsibility, analysis of errors, process automation ( deploy, provision), monitoring
Engineering culture: automate routines, don't focus only on features
Effectiveness: Build with end in mind, ask why, avoid handovers, flexible processes, agile, lean
Prodcut thinking: customer demos, user feedback on storyboard, customer interaction, product blog, you build it you run it
Taking responsibility: Address derailment openly, let people figure out how to do things, reward responsibility, reward failure, transparency

from --> to 

group > team
departments > crossfunctional teams
fingerpointing > shared responsibility
customer distance > closeness to customer
specialist roles > generalist roles
individual thinking > creative action
Problem avoidance > fail fast

ORGANIZATION

GOVERNANCE

PROCESSES

	* SCRUM
	* AGILE
	* LEAN
	    TIMWOODS
	      * Transportation ( in IT, task switching )
	      * Inventory ( in IT, unfinished work )
	      * Waiting 
	      * Overprocessing ( lack of understanding on what the customers wants )
	      * Overproduction ( useless features )
	      * Defects ( errors due to wrong processes ) 
	      * Skills non utilized
	* VALUE STREAM MAPPING
	* STORY MAPPING

AUTOMATION

MEASURE

vision > mission > goals / objective

goals / objectives = SMART

S - Specific
M - Measurable
A - Achievable
R - Relevant
T - Time bonded

Objectives = CSF 

Critical Success Factors

* all factors should lead to success

they are linked to risks ( uncertainty )

KPI

Key Performance Indicators

* intermediate milestones to success / waypoints on the ship's course to dest. 
* they should also be SMART

So monitoring is calculating your progress and monitoring your
direction in relation to a course, as a GPS in the ship metaphore. 

Measurements are based on metrics. 
Based on metrics we perform measurements.

To stay in control i need to know if the input is (in)correct. 
The quality of your input in the process is defining the quality in your output
and is influencing your measurement, and is coincident with your key performance
indicators. Those helps identifying flags pointing to correction.

Keep an eye on what you are measuring, don't measure too much, but learn from the pivot
process what you really need to measure in relationship to your ( changing sometimes ) objectives. 

Let's say you have a A > B > C process

purchase, produce, sell

You wanted to sell 400. Plan steps from left to right. 
If you did not sell enough, you will look at the process backwards, 
from right to left and check
the previous step. Did you produce enough?
If we keep on measuring key steps and experiment along the way we have a third way.

CALMS

Culture
Automation
Lean
Measure
Sharing information


Performance metrics = lagging indicators

VS.

Performance predictors = leading indicators



